{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	"boilerplate": {
	  "prefix": "comp",
	  "body": [
		"#include <bits/stdc++.h>",
		"#include <ext/pb_ds/assoc_container.hpp>",
		"#include <ext/pb_ds/tree_policy.hpp>",
		"#ifndef ONLINE_JUDGE",
		"#include \"debug.h\"",
		"#else",
    	"#define db(...) 69",
		"#endif",
		"using namespace std;",
		"using namespace __gnu_pbds;",
		"",
		"#define Code ios_base::sync_with_stdio(0);",
		"#define By cin.tie(0);",
		"#define Adi 3435;",
		"#define erase_first(nums) nums.erase(nums.begin());",
		"",
		"using ll= long long;",
		"using lld= long double;",
		"",
		"const ll inf= 1e17;",
		"const ll mod=1e9+7;",
		"",
		"typedef pair<ll, ll> pll;",
		"typedef vector<ll> vll;",
		"typedef vector<pll> vpll;",
		"typedef map<ll,ll> mll;",
		"typedef array<ll,2> ar2;",
		"typedef array<ll,3> ar3;",
		"",
		"#define pb push_back",
		"#define fl(i,k,n) for(int i=(int)k;i<(int)n;++i)",
		"#define rl(i,n,m) for(int i=(int)n;i>=(int)m;--i)",
		"#define py cout<< \"YES\" <<\"\\n\"",
		"#define po cout<< \"1\" <<\"\\n\"",
		"#define pm cout<<\"-1\" << \"\\n\"",
		"#define pn cout<<\"NO\" << \"\\n\"",
		"#define pz cout << 0 << \"\\n\"",
		"#define be(v) v.begin(),v.end()",
		"#define rbe(v) v.rbegin(),v.rend()",
		"#define pyn(ok) ok ? py : pn",
		"#define setbits(X) __builtin_popcountll(X)",
		"#define ff first",
		"#define ss second",
		"#define sz size()",
		"#define lb lower_bound",
		"#define ub upper_bound",
		"#define mxx(v) *max_element(be(v))",
		"#define mnn(v) *min_element(be(v))",
		"#define UNIQUE(x) sort(be(x)); x.erase(unique(be(x)), x.end())",
		"template <typename... T> void print(T... args) { ((cout << args << \" \"), ..., (cout << \"\\n\"));}",
		"template <typename T> void print(vector<T> &vec) { for (const auto &element : vec) { cout <<element << \" \"; }cout<<'\\n'; }",
		"template <typename T> bool chmin(T &x, const T &y) { if (x > y) { x = y; return true; } return false; }",
		"template <typename T> bool chmax(T &x, const T &y) { if (x < y) { x = y; return true; } return false; }",
		"template <typename T>void custom_input(T& arg) {cin >> arg;}",
		"template <typename T, typename... Args> void custom_input(T& arg, Args&... args) { cin >> arg; custom_input(args...); }",
		"",
		"#define ii(...) \\",
		"    ll __VA_ARGS__; \\",
		"    custom_input(__VA_ARGS__)",
		
		"",
		"void iiv(vll &v, ll n){fl(i,0,n) {ll x; cin >> x; v.pb(x);}}",
		"void displayMatrix(vector<vector<ll>> &mat) { for(auto v : mat) { for(auto e : v) cout <<  e << \" \"; cout <<\"\\n\"; } }",
		"template<typename T>ll sumvec(vector<T>v){ll n=v.sz;ll s=0;fl(i,0,n)s+=v[i];return s;}",
		"template<class T> using oset =tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update> ;",
		"// oset<int> os; os.find_by_order(k)): kth element in os, os.order_of_key(k): no of items strictly less than k",
		"",
		"ll lcm(ll a, ll b){return (a/__gcd(a,b)*b);}",
		"ll Mod(ll n) {return (n + mod) % mod;}",
		"ll moduloMultiplication(ll a, ll b) { ll res = 0; a %= mod; while (b) { if (b & 1) res = (res + a) % mod; a = (a+a)%mod; b >>= 1; } return res; }",
		"ll powermod(ll x, ll y){ll res = 1;x = x % mod;if (x == 0) return 0;while (y > 0){if (y & 1)res = (res*x) % mod;y = y>>1;x = (x*x) % mod;}return res;}",
		"",
		"bool sorta(const pll &a,const pll &b){return (a.second < b.second);}",
		"bool sortd(const pll &a,const pll &b){return (a.second > b.second);}",
		"bool dd(ll a, ll b) {return a > b;}",
		"",
		"bool paritySame(ll x, ll y) {return !((x & 1) ^ (y & 1));};",
		"bool isPrime(ll n) {if(n<=1){return false;}for(ll i=2;i*i<=n;++i){if(n%i==0){return false;}}return true;}",
		"bool isPerfectSquare(ll x){if (x >= 0) {ll sr = sqrt(x);return (sr * sr == x);}return false;}",
		"bool isRegularBracketSequence(const string &s) { int balance = 0;for (char c : s) { if (c == '(') {balance++;} else { balance--;}if (balance < 0) {return false;}}return balance == 0;}",
		"int countDigits(ll n){int k=0;while(n>0){ n = n/10; k++;}return k;}",
		"ll ncr(ll n,ll r){ll ans = 1;for(ll i=n;i>n-r;i--) { ans *= i;} for(ll i=r;i>=1;i--){ans /= i; } return ans;}",
		"ll findMex(vector<ll> arr){sort(arr.begin(), arr.end()); ll mex = 0; for (ll i = 0; i < static_cast<ll>(arr.sz); i++){ if (arr[i] == mex){ mex++;}} return mex;}",
		"ll sqrt(ll a) { ll l = 0; ll r = a; ll ans = 0; while (l <= r) { ll mid = l + ((r - l) / 2); if (mid * mid <= a) { ans = mid; l = mid + 1; } else { r = mid - 1; } } return ans; }",
		"ll countPrimes(ll n){vector<bool>ans(n + 1,1);ans[0]=ans[1]=0;ll prime=0;for(ll i=2;i<n;++i){if (ans[i]){prime++;for(ll j=2*i;j<n;j+=i){ans[j]=0;}}}return prime;}",
		"vll factorization(int n){vll v; for (int i=1;i*i<=n;i++){if (n%i==0){v.pb(i);if (i*i!=n){v.pb(n/i);}}}return v;}",
		"vll prefixSum(vll &v) { vll pre(v.sz+1); partial_sum(be(v), pre.begin()+1); return pre; }",
		"vll prime_factorization(ll n){vll v; for (int i=2;i*i<=n;i++){while(n%i==0){n/=i;v.pb(i);}}if (n!=1){v.pb(n);}return v;}",
		"",
		"",
		"void soln() {",
		"    ii(n$1);",
		"}",
		"int main () {",
		"",
		"    clock_t start = clock();",
		"    Code By Adi",
		"    #ifndef ONLINE_JUDGE",
		"    freopen(\"input.txt\", \"r\" , stdin);",
		"    freopen(\"output.txt\", \"w\" , stdout);",
		"    freopen(\"error.txt\", \"w\" , stderr);",
		"    #endif",
		"",
		"    ll t = 1;",
		"    cin >> t;$2",
		"",
		"    fl(i,0,t) {",
		"        // cout << \"Case #\" << i << \": \";",
		"        soln();",
		"    }",
		"    clock_t end = clock();",
		"    double elapsed = (double)(end - start)/CLOCKS_PER_SEC;",
		"    cerr << setprecision(3) << fixed <<  \"[Finished in: \" << elapsed << \"s]\";",
		"    return 0;",
		"}",

		" /*",
		"⡐⡐⡐⡐⡐⡐⢄⠠⠂⠂⠀⠐⠄⠀⢀⡀⢢⡹⡼⡽⡽⡽⡽⣹⡽⡽⣞⣆⡘⡉⠳⣐⠐⡐⡐⡐⡐⡐⡐",
		"⡐⡐⡐⡐⡐⡐⠀⠀⠾⣻⣻⣻⡻⠣⣿⠡⢠⡱⣛⣟⣟⡏⡉⢋⡻⣻⣻⣻⡽⠳⣣⢂⠂⠹⣦⢂⢂⢂⢂",
		"⡐⠄⠂⢂⢂⢷⣻⣻⣻⣻⡛⡐⠄⢀⡼⡹⣾⣻⣻⣏⣥⠻⣿⣿⣿⡜⡽⣟⣯⡻⣻⡔⣤⣂⣻⣝⢧⠐⡐",
		"⡐⡴⣱⣻⢸⣻⣻⣻⡻⡐⠔⠀⢀⠆⣹⡽⣻⣻⣻⣿⣿⣿⣿⣿⣿⣿⣟⢮⢫⣛⢾⢋⠔⠀⠀⡂⠌⡑⡔",
		"⡵⡽⡝⡇⣟⣟⣟⠇⠀⠀⠠⠠⣫⢫⢇⠸⣻⣻⢻⣽⣯⡄⣤⣄⣶⠺⣿⣿⣷⡓⢭⢻⢻⣛⠵⠃⠁⠀⠒",
		"⡝⢱⡽⣧⢹⣻⠁⠄⢂⠀⡐⡔⡜⡜⣸⣻⡉⣟⣟⢯⣿⣿⣿⣿⣿⣿⣿⣿⣷⠉⢠⠀⠀⠀⠀⡀⢂⢂⠀",
		"⠄⠄⣸⡽⣈⠇⠀⠐⡔⡀⡜⡌⢎⡘⢷⣿⢸⣯⡜⡝⣟⣟⣿⣿⣿⣿⣿⣿⣿⡿⠀⠐⠀⢠⠀⡀⡐⠀⠄",
		"⠀⠀⢯⢂⣇⠄⡀⢆⠀⠡⡂⠱⡱⡱⢠⠰⡈⠨⣿⣿⣿⣿⣿⣿⣿⣿⢿⣿⣿⣟⠀⢠⣳⢞⡝⣝⡝⣝⡝",
		"⠀⠀⣏⡇⣸⡆⡀⠀⠱⡒⠀⢁⢊⢎⠀⢎⠄⡀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⢠⢣⢏⣏⢏⣏⢏⢏⢋⠀",
		"⠠⠻⣯⢫⣻⡽⠀⢂⠀⠀⠀⠀⠀⠱⡡⡈⠂⣾⣿⣿⣿⣿⣟⣑⠔⡙⡛⡁⡀⢘⢄⠫⢫⠶⣹⡹⡹⣹⡹",
		"⣧⠠⡈⣏⢯⡜⡷⣿⣷⣄⠛⢿⣧⠀⠀⠀⢸⢇⢿⣿⣿⣿⠇⠀⠀⠀⠀⠢⠘⠀⠀⠘⠜⠀⠀⢢⢋⣿⣿",
		"⣿⣿⣄⢏⢎⠞⡽⡽⣿⣿⣿⣿⣿⣿⣤⠀⠀⢻⡿⣄⠈⠛⠀⠀⠀⠈⣏⢏⣏⢦⠀⠀⡴⠉⠐⠀⣿⣿⣿",
		"⣿⣿⣿⣏⢞⠜⢭⢫⣫⡞⡽⣻⢿⣿⣿⣿⠄⠀⠀⠛⣡⣩⡾⠀⠀⡜⡭⡭⣫⢎⢎⢄⡠⡰⠱⠁⣴⢏⡰",
		"⠢⢢⠻⣿⣎⢎⢎⢚⢭⢭⢫⣏⠷⣙⢞⢞⠼⡜⣜⡜⡞⡵⡭⣚⠵⡭⣚⠵⡲⢦⢥⢡⡰⣚⢭⢫⢉⠄⠄",
		"⠰⠰⠰⠰⡰⢧⢣⢣⠠⢣⢣⢣⢣⢭⢫⣏⢶⣔⠔⠔⠔⠥⢣⠇⠃⠥⢢⢢⢲⡹⡹⡹⡙⢄⣤⡐⢋⠄⠀",
		"⢦⠂⠂⠂⠢⠢⢢⢣⢣⢢⠀⠣⢣⢣⢣⢣⢣⢣⣩⣧⠒⡎⠊⣨⣚⢞⠭⠋⢰⣐⢲⣿⠇⡺⣽⣿⣭⠀⠀",
		"⠀⠀⠀⠀⠀⠀⠦⣀⠀⠀⠀⠉⠉⠉⠀⣀⡐⠼⣶⣴⡀⠀⠀⠀⠀⠄⠄⠄⠄⠂⠁⠣⢣⢂⠀⠀⠉⣧⠀",
		"     ⠀⠀⢀⠤⣢⢂⢄⠄⢂⠐⠄⠌⠛⢿⠀⠀⠀⠀⠀@aditya3435 ⢘⣷..⠖⡐",
		"⠀⠀⠀⠀⠀⠀⠀⠀⠀⢫⢫⠎⠊⠂⠀⠢⢂⠢⢂⢂⢂⢂⢂⠄⠀⠀⠀⠀⠀⢀⢀⠠⢠⢂⠆⢂⠦⡹⡇",
		"⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣏⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⠀⠀⠂⢂⠂⠂⠂⠀⠀⠀⠀⠀⠀⠀⠀⢘⠜⠀",
		"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠢⠢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⢀⠆⠀⠀",
        " */",

	  ],
	  "description": "Log output to console"
	}
  }
  
